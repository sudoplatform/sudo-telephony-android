# This directive allows results to be deferred during execution
directive @defer on FIELD

# Tells the service which mutation triggers this subscription.
directive @aws_subscribe(
  # List of mutations which will trigger this subscription when they are called.
  mutations: [String]
) on FIELD_DEFINITION

# Directs the schema to enforce authorization on a field
directive @aws_auth(
  # List of cognito user pool groups which have access on this field
  cognito_groups: [String]
) on FIELD_DEFINITION

# Tells the service this field/object has access authorized by an API key.
directive @aws_api_key on OBJECT | FIELD_DEFINITION

# Tells the service this field/object has access authorized by an OIDC token.
directive @aws_oidc on OBJECT | FIELD_DEFINITION

# Tells the service this field/object has access authorized by a Cognito User Pools token.
directive @aws_cognito_user_pools(
  # List of cognito user pool groups which have access on this field
  cognito_groups: [String]
) on OBJECT | FIELD_DEFINITION

# Tells the service which subscriptions will be published to when this mutation is
# called. This directive is deprecated use @aws_susbscribe directive instead.
directive @aws_publish(
  # List of subscriptions which will be published to when this mutation is called.
  subscriptions: [String]
) on FIELD_DEFINITION

# Tells the service this field/object has access authorized by sigv4 signing.
directive @aws_iam on OBJECT | FIELD_DEFINITION

type AccessToken {
  token: String!
}

type Attribute {
  name: String!
  value: String!
}

input AttributeInput {
  name: String!
  value: String!
}

input BooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

interface CommonObject {
  #   ID of the object.
  id: ID!

  #   ID of the user which owns the object.
  owner: ID!

  #   Update version of the object.
  version: Int!

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object was created.
  createdAtEpochMs: Float!

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object last updated.
  updatedAtEpochMs: Float!
}

#   Convenience type representing a conversation between a sudo phone number and one or more
#  participants.  This id of this object will be set as the conversation id on message objects.
type Conversation implements CommonObject {
  #   v5 UUID generated by the client, v5 UUID produces a predictable repeatable
  #  result when provided with identical inputs, a fixed namespace UUID is included to
  #  further reduce collision.  Conversation IDs should be calculated as follows:
  #  v5(owner, localPhoneNumber + remotePhoneNumber)
  id: ID!

  #   v4 UUID of user that owns the conversation resource.
  owner: ID!

  #   The sudo owner that owns the conversation resource.
  sudoOwner: ID!

  #   The phone number id related to the conversation
  phoneNumberId: ID!

  #   Type for this conversation.
  type: ConversationType!

  #   v4 UUID of last message, can be used to display preview in message feed.
  lastMessage: ID!

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object was created.
  createdAtEpochMs: Float!

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object was last updated.
  updatedAtEpochMs: Float!

  #   Version of this object, increments on update.
  version: Int!
}

#   List conversation results iterator.
type ConversationConnection {
  items: [Conversation!]
  nextToken: String
}

input ConversationFilterInput {
  sudoOwner: IDFilterInput
  phoneNumberId: IDFilterInput
  createdAtEpochMs: FloatFilterInput
  updatedAtEpochMs: FloatFilterInput
  and: [MessageFilterInput]
  or: [MessageFilterInput]
  not: MessageFilterInput
}

#   Indicates if this is a 1x1 SMS conversation or a group conversation.
enum ConversationType {
  INDIVIDUAL
  GROUP
}

input CreatePublicKeyInput {
  keyId: String!
  keyRingId: String!
  algorithm: String!
  publicKey: String!
}

input CreateSudoInput {
  claims: [SecureClaimInput!]!
  objects: [SecureS3ObjectInput!]!
}

input CreateVoiceCallInput {
  #   Source phone number in E164 format.
  from: String!

  #   Recipient. Must be one of the following:
  #  - A phone number in E164 format.
  to: String!
}

input DeleteKeyRingInput {
  keyRingId: String!
}

#   Input definition to delete a message.
input DeleteMessageInput {
  #   v4 UUID assigned to message record.
  id: ID!

  #   KeyId instance of the message to delete
  keyId: String!

  #   Expected version of the message record.
  expectedVersion: Int!
}

input DeletePublicKeyInput {
  keyId: String!
}

input DeleteSudoInput {
  id: ID!
  expectedVersion: Int!
}

#   Input definition to delete a phone number.
input DeprovisionPhoneNumberInput {
  #   Sudo phone number in E164 format.
  phoneNumber: String!

  #   Expected version of the phone number.
  expectedVersion: Int!
}

type Entitlement {
  name: String!
  value: Int!
}

input FloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input GetOwnershipProofInput {
  sudoId: ID!
  audience: String!
}

#   GPS coordinates that scoped the phone number search result.
type GpsCoordinates {
  latitude: String!
  longitude: String!
}

#   Input definition to scope phone number search by GPS.
input GpsCoordinatesInput {
  latitude: String!
  longitude: String!
}

input IDFilterInput {
  ne: ID
  eq: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

#   Input definition to update a message.
input InternalMessageChangeInput {
  #   The composite key of the message entity
  sealedId: ID!

  #   Current state of message record.
  state: MessageState!

  #   ID used for the client to subscribe to specific events.
  clientRefId: String
}

input IntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

#   List message results iterator.
type MessageConnection {
  items: [SealedMessage!]
  nextToken: String
}

#   Possible directions for a SMS/MMS message.
enum MessageDirection {
  INBOUND
  OUTBOUND
}

input MessageDirectionFilterInput {
  eq: MessageDirection
}

input MessageFilterInput {
  conversation: IDFilterInput!
  keyId: IDFilterInput
  createdAtEpochMs: FloatFilterInput
  updatedAtEpochMs: FloatFilterInput
  and: [MessageFilterInput]
  or: [MessageFilterInput]
  not: MessageFilterInput
}

#   Possible states for a SMS/MMS message.
#  QUEUED      - Outbound message queued by telephony vendor ready for sending to carrier.
#  SENT        - Outbound message sent by telephony vendor to carrier.
#  DELIVERED   - Outbound message acknowledged as delivered by carrier.
#  UNDELIVERED - Outbound message acknowledged as undelivered by carrier.
#  FAILED      - Outbound message acknowledged as failed by carrier.
#  RECEIVED    - Inbound message stored at telephony vendor.
enum MessageState {
  QUEUED
  SENT
  DELIVERED
  UNDELIVERED
  FAILED
  RECEIVED
}

input MessageStateFilterInput {
  ne: MessageState
  eq: MessageState
  in: [MessageState]
  notIn: [MessageState]
}

type ModelSudoConnection {
  items: [Sudo!]
  nextToken: String
}

#   CRUD operations for phone number and messaging resources.
type Mutation {
  createSudo(input: CreateSudoInput!): Sudo
  updateSudo(input: UpdateSudoInput!): Sudo
  deleteSudo(input: DeleteSudoInput!): Sudo
  getOwnershipProof(input: GetOwnershipProofInput!): OwnershipProof
  redeemToken(input: RedeemTokenInput!): [Entitlement!]!
  internalProcessCreateSudoEvent(input: ProcessCreateSudoEventInput!): Sudo
  internalProcessDeleteSudoEvent(input: ProcessDeleteSudoEventInput!): Sudo

  #   Search for available phone numbers for given criteria.
  searchPhoneNumbers(input: SearchPhoneNumbersInput): PhoneNumberSearch

  #   Update phone number search state.
  internalUpdatePhoneNumberSearch(input: UpdatePhoneNumberSearchInput): PhoneNumberSearch

  #   Provision phone number.
  provisionPhoneNumber(input: ProvisionPhoneNumberInput!): PhoneNumber

  #   Update phone number state.
  internalUpdatePhoneNumber(input: UpdatePhoneNumberInput!): PhoneNumber

  #   Deprovision phone number.
  deprovisionPhoneNumber(input: DeprovisionPhoneNumberInput!): PhoneNumber

  #   Send SMS/MMS message.
  sendMessage(input: SendMessageInput!): ID!

  #   Update SMS/MMS message state.
  internalMessageChange(input: InternalMessageChangeInput!): SealedMessage

  #   Delete SMS/MMS message.
  deleteMessage(id: ID!): ID

  #   Delete a conversation.
  deleteConversation(id: ID!): ID

  #   Retrieve an access token for initiating an outgoing voice call.
  createVoiceCall(input: CreateVoiceCallInput!): AccessToken!
  createPublicKeyForTelephony(input: CreatePublicKeyInput!): PublicKey!
  deletePublicKeyForTelephony(input: DeletePublicKeyInput): PublicKey
}

type OwnershipProof {
  jwt: String!
}

type PaginatedPublicKey {
  items: [PublicKey!]!
  nextToken: String
}

#   Represents a provisioned phone number record.
type PhoneNumber implements CommonObject {
  #   v4 UUID of phone number record.
  id: ID!

  #   v4 UUID of user that owns the phone number resource.
  owner: ID!

  #   The sudo owner that owns the phone number resource.
  sudoOwner: ID!

  #   E164 formatted phone number.
  phoneNumber: String!

  #   ISO country code of phone number e.g. 'US' 'ZZ'.
  country: String!

  #   State of phone number.
  state: PhoneNumberState!

  #   ID used for the client to subscribe to specific events.
  clientRefId: String

  #   Key ring ID that dictates which keys the child resources of this phone number will be encrypted with.
  keyRingId: String!

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object was created.
  createdAtEpochMs: Float!

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object was last updated.
  updatedAtEpochMs: Float!

  #   Version of this phone number record, increments on update.
  version: Int!
}

#   List phone number results iterator.
type PhoneNumberConnection {
  items: [PhoneNumber!]
  nextToken: String
}

input PhoneNumberFilterInput {
  id: IDFilterInput
  country: StringFilterInput
  sudoOwner: IDFilterInput
  state: PhoneNumberStateFilterInput
  createdAtEpochMs: FloatFilterInput
  updatedAtEpochMs: FloatFilterInput
  and: [PhoneNumberFilterInput]
  or: [PhoneNumberFilterInput]
  not: PhoneNumberFilterInput
}

#   Represents a phone number search record based on a search criteria.
type PhoneNumberSearch implements CommonObject {
  #   v4 UUID assigned to the phone number search.
  id: ID!

  #   v4 UUID of user that owns the phone number search resource.
  owner: ID!

  #   ISO country code of phone number e.g. 'US' 'ZZ'.
  country: String!

  #   GPS coordinates to scope phone number search.
  gps: GpsCoordinates

  #   Area code of phone number e.g. 801, 555.
  prefix: String

  #   Current state of phone number search request.
  state: PhoneNumberSearchState!

  #   Array of available phone numbers.
  results: [String!]

  #   ID used for the client to subscribe to specific events.
  clientRefId: String

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object was created.
  createdAtEpochMs: Float!

  #   Time in milliseconds since 1970-01-01T00:00:00Z when object was last updated.
  updatedAtEpochMs: Float!

  #   Version of this phone number record, increments on update.
  version: Int!
}

#   List phone number search results iterator.
type PhoneNumberSearchConnection {
  items: [PhoneNumberSearch!]
  nextToken: String
}

input PhoneNumberSearchFilterInput {
  id: IDFilterInput
  country: StringFilterInput
  state: PhoneNumberSearchStateFilterInput
  createdAtEpochMs: FloatFilterInput
  updatedAtEpochMs: FloatFilterInput
  and: [PhoneNumberSearchFilterInput]
  or: [PhoneNumberSearchFilterInput]
  not: PhoneNumberSearchFilterInput
}

#   Phone number search states.
enum PhoneNumberSearchState {
  SEARCHING
  COMPLETE
  FAILED
}

input PhoneNumberSearchStateFilterInput {
  ne: PhoneNumberSearchState
  eq: PhoneNumberSearchState
  in: [PhoneNumberSearchState]
  notIn: [PhoneNumberSearchState]
}

#   Phone number provisioning states.
enum PhoneNumberState {
  PROVISIONING
  FAILED
  COMPLETE
  DEPROVISIONING
}

input PhoneNumberStateFilterInput {
  ne: PhoneNumberState
  eq: PhoneNumberState
  in: [PhoneNumberState]
  notIn: [PhoneNumberState]
}

input ProcessCreateSudoEventInput {
  owner: ID!
  claims: [SecureClaimInput!]!
  objects: [SecureS3ObjectInput!]!
  metadata: [AttributeInput!]!
}

input ProcessDeleteSudoEventInput {
  id: ID!
  owner: ID!
}

#   Input definition to provision a phone number.
input ProvisionPhoneNumberInput {
  #   E164 formatted phone number.
  phoneNumber: String!

  #   ISO country code of phone number e.g. 'US' 'ZZ'.
  country: String!

  #   Key ring ID that dictates which keys the child resources of this phone number will be encrypted with.
  keyRingId: String!

  #   ID used for the client to subscribe to specific events.
  clientRefId: String

  #   Ownership proof tokens
  ownerProofs: [String!]!
}

#   Doesn't semantically implement SealedObject but without
#  an implementer the SealedObject interface doesn't generate
#  a typescript type.
type PublicKey implements SealedObject {
  id: ID!
  keyId: String!
  keyRingId: String!
  algorithm: String!
  publicKey: String!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
}

#   Query phone number and message resources.
type Query {
  ping: String
  getSudo(id: ID!): Sudo
  listSudos(limit: Int, nextToken: String): ModelSudoConnection

  #   Returns an array of ISO country codes.
  getPhoneNumberCountries: SupportedCountries

  #   Returns a phone number search record.
  getPhoneNumberSearch(id: ID!): PhoneNumberSearch

  #   Returns a list of phone number search records.
  listPhoneNumberSearches(filter: PhoneNumberSearchFilterInput, limit: Int, nextToken: String): PhoneNumberSearchConnection

  #   Get a phone number record by ID.
  getPhoneNumber(id: ID!): PhoneNumber

  #   Returns a list of phone numbers.
  listPhoneNumbers(filter: PhoneNumberFilterInput, limit: Int, nextToken: String): PhoneNumberConnection

  #   Get a message record by ID.
  getMessage(id: ID!, keyId: String!): SealedMessage

  #   Returns a list of messages.
  listMessages(filter: MessageFilterInput!, limit: Int, nextToken: String): MessageConnection

  #   Get a conversation record by ID.
  getConversation(id: ID!): Conversation

  #   Returns a list of message conversations.
  listConversations(filter: ConversationFilterInput, limit: Int, nextToken: String): ConversationConnection
  getPublicKeyForTelephony(keyId: String!): PublicKey
  getPublicKeysForTelephony(limit: Int, nextToken: String): PaginatedPublicKey!
  getKeyRingForTelephony(keyRingId: String!, limit: Int, nextToken: String): PaginatedPublicKey!
}

input RedeemTokenInput {
  token: String!
  type: String!
}

#   Representation of the S3 Object containing telephony media (i.e. MMS and Voicemails).
type S3MediaObject {
  #   Key of object in S3.
  key: String!

  #   Name of S3 bucket.
  bucket: String!

  #   Region S3 bucket is located in.
  region: String!
}

#   Representation of the S3 Object containing telephony media (i.e. MMS and Voicemails).
input S3MediaObjectInput {
  #   Key of object in S3.
  key: String!

  #   Name of S3 bucket.
  bucket: String!

  #   Region S3 bucket is located in.
  region: String!
}

#   Definition of a message record containing sealed sensitive data
type SealedMessage implements SealedObject, CommonObject {
  #   UNSEALED: v4 UUID assigned to message record.
  id: ID!

  #   UNSEALED: v4 UUID of user that owns the message resource.
  owner: ID!

  #   UNSEALED: v4 UUID of sudo that owns the message resource.
  sudoOwner: ID!

  #   UNSEALED: The phone number id related to the message resource.
  phoneNumberId: ID!

  #   UNSEALED: v5 UUID generated by the client, v5 UUID produces a predictable repeatable
  #  result when provided with identical inputs, a fixed namespace UUID is included to
  #  further reduce collision.  Conversation IDs should be calculated as follows:
  #  v5(owner, localPhoneNumber + remotePhoneNumber)
  conversation: ID!

  #   SEALED: Sudo phone number in E164 format.
  localPhoneNumber: String!

  #   SEALED: Remote phone number in E164 format.
  remotePhoneNumber: String!

  #   UNSEALED: Direction of message.
  direction: MessageDirection!

  #   SEALED: Message body, null if MMS only.
  body: String

  #   SEALED: MMS attachments.
  media: [S3MediaObject!]

  #   UNSEALED: Has this message been marked as seen on client.
  seen: Boolean!

  #   UNSEALED: State of message record.
  state: MessageState!

  #   UNSEALED: Algorithm descriptor describing public and symmetric key encryption, e.g RSAEncryptionOAEPSHA256AESGCM.
  algorithm: String!

  #   UNSEALED: Client generated key ID for the public key.
  keyId: String!

  #   UNSEALED: ID used for the client to subscribe to specific events.
  clientRefId: String

  #   UNSEALED: Time in milliseconds since 1970-01-01T00:00:00Z when object was created.
  createdAtEpochMs: Float!

  #   UNSEALED: Time in milliseconds since 1970-01-01T00:00:00Z when object was last updated.
  updatedAtEpochMs: Float!

  #   UNSEALED: Version of this object, increments on update.
  version: Int!
}

interface SealedObject {
  algorithm: String!
  keyId: String!
  owner: ID!
  version: Int!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
}

#   Input definition to search for available phone numbers by search.
input SearchPhoneNumbersInput {
  #   ISO country code of phone number e.g. 'US' 'ZZ'.
  country: String!

  #   GPS coordinates to scope the phone number search.
  gps: GpsCoordinatesInput

  #   Area code of phone number e.g. 801, 555.
  prefix: String

  #   Limit the number of search results.
  limit: Int

  #   ID used for the client to subscribe to specific events.
  clientRefId: String
}

type SecureClaim {
  name: String!
  version: Int!
  algorithm: String!
  keyId: String!
  base64Data: String!
}

input SecureClaimInput {
  name: String!
  version: Int!
  algorithm: String!
  keyId: String!
  base64Data: String!
}

type SecureS3Object {
  name: String!
  version: Int!
  algorithm: String!
  keyId: String!
  bucket: String!
  region: String!
  key: String!
}

input SecureS3ObjectInput {
  name: String!
  version: Int!
  algorithm: String!
  keyId: String!
  bucket: String!
  region: String!
  key: String!
}

#   Input definition to send a message.
input SendMessageInput {
  #   Source phone number in E164 format.
  from: String!

  #   Recipient phone number in E164 format.
  to: String!

  #   Message body to send to recipient.
  body: String

  #   Pointer to MMS Media object posted to S3 by client.
  media: [S3MediaObjectInput!]

  #   ID used for the client to subscribe to specific events.
  clientRefId: String
}

input StringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

#   Subscription events on phone number and messaging events.
type Subscription {
  onCreateSudo(owner: ID!): Sudo
  onUpdateSudo(owner: ID!): Sudo
  onDeleteSudo(owner: ID!): Sudo

  #   Owner id for the current logged in user.
  #  ID used for the client to subscribe to specific search events.
  OnSearch(owner: String!, clientRefId: String): PhoneNumberSearch

  #   Owner id for the current logged in user.
  #  ID used for the client to subscribe to specific provision events.
  OnProvision(owner: String!, clientRefId: String): PhoneNumber

  #   Owner id for the current logged in user.
  #  ID used for the client to subscribe to specific message events.
  OnMessage(owner: String!, clientRefId: String): SealedMessage
}

type Sudo {
  id: ID!
  claims: [SecureClaim!]!
  objects: [SecureS3Object!]!
  metadata: [Attribute!]!
  createdAtEpochMs: Float!
  updatedAtEpochMs: Float!
  version: Int!
  owner: ID!
}

#   Array of ISO country codes.
type SupportedCountries {
  countries: [String!]!
}

#   Input definition to update a phone number record.
input UpdatePhoneNumberInput {
  #   v4 UUID of phone number to update.
  id: ID!

  #   ID from phone number vendor.
  vendorId: ID

  #   State of phone number provision.
  state: PhoneNumberState!

  #   ID used for the client to subscribe to specific events.
  clientRefId: String

  #   Error code if state is Failed.
  errorCode: String

  #   Error message if state is Failed.
  errorMessage: String

  #   Expected version of the message record.
  expectedVersion: Int!
}

#   Input definition to update a phone number search state.
input UpdatePhoneNumberSearchInput {
  #   v4 UUID of phone number search record to update.
  id: ID!

  #   Current state of phone number search request.
  results: [String!]!

  #   Current state of phone number search request.
  state: PhoneNumberSearchState!

  #   ID used for the client to subscribe to specific events.
  clientRefId: String

  #   Expected version of the message record.
  expectedVersion: Int!
}

input UpdateSudoInput {
  id: ID!
  claims: [SecureClaimInput!]
  objects: [SecureS3ObjectInput!]
  expectedVersion: Int!
}
